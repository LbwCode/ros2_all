# 创建 python 功能包 
ros2 pkg create --build-type ament_python ros2_ce1_python  
# 创建 cpp 功能包
ros2 pkg create --build-type ament_cmake interface_all  

# 编译全部
colcon build

# 编译单个（注意：先单独编译接口功能包）
colcon build --packages-select interface_all

# 临时环境变量
source /home/lbw/ros2_all/install/setup.bash


# 永久环境变量
echo "source /home/lbw/ros2_all/install/setup.bash" >> ~/.bashrc && source ~/.bashrc
输入运行命令提示不存在，换新终端试下



launch 工具 多节点(功能包)启动
# cpp 中 cmakelist.txt添加 
install(DIRECTORY launch DESTINATION share/${PROJECT_NAME})
# python 添加 路径 
data_files=[
    ('share/' + package_name, ['launch/ce1_launch.xml']),
]

ros2 launch ros2_launch_cpp_ce1 ce1_launch.xml
ros2 launch ros2_launch_python_ce1 ce1_launch.xml

# 功能包运行命令

# python
# 你好 世界
ros2 run ros2_ce1_python lbw_ce1
ros2 run ros2_ce1_python lbw_ce2
# 传输视频
ros2 run ros2_img_python lbw_img_ce1
ros2 run ros2_img_python lbw_img_ce2
# 单独先起摄像头传输，单次询问坐标位置
ros2 run ros2_service_python lbw_service_ce1
ros2 run ros2_service_python lbw_service_ce2
# 话题+服务=动作执行
ros2 run ros2_action_python action_ce1
ros2 run ros2_action_python action_ce2

# cpp
# 你好 世界
ros2 run ros2_ce1_cpp1 cpp_ce1
ros2 run ros2_ce1_cpp1 cpp_ce2
# 传输视频
ros2 run ros2_img_cpp1 video_publisher
ros2 run ros2_img_cpp1 video_subscriber
# 客户端 输出2数 服务端进行相加返回
ros2 run ros2_service_cpp service_object_client
ros2 run ros2_service_cpp service_object_server
# 单个完整动作
ros2 run ros2_action_cpp action_move_server
ros2 run ros2_action_cpp action_move_client
# 参数通讯
ros2 run ros2_param_cpp1 param_2
ros2 run ros2_param_cpp1 param_3



常用命令：
大检查
ros2 doctor   

小王八：
ros2 run turtlesim turtlesim_node
ros2 run turtlesim turtle_teleop_key

1. node 节点相关
查看当有哪些节点在运行
ros2 node list

查看当前某个节点内部有多少通讯
ros2 node info

2. interface 接口相关
查看所有接口
ros2 interface list
查看某功能包下的所有接口
ros2 interface package turtlesim
包含接口的功能包
ros2 interface package 
某个接口的格式
ros2 interface proto 接口名
某接口的全部内容
ros2 interface show 接口名

3. topic  话题相关
查看当前所有的话题
ros2 topic list
查看话题占用带宽
ros2 topic bw 话题名
查看某话题的使用的接口   话题-》消息类型
ros2 topic type 话题名
查看某话题的数据传输时间戳 注意：自定义的是没有的
ros2 topic delay 话题名
输出某话题的内容
ros2 topic echo 话题名
例如：小王八的坐标
ros2 topic echo /turtle1/pose
消息类型-》话题
ros2 topic find 消息类型
例如：：查小王八的话题
ros2 topic find turtlesim/msg/Pose
查看话题发布的频率
ros2 topic hz 

4. service 服务相关
查看当前所有的服务
ros2 service list 
同上
服务-消息类型 type
消息类型-》服务 find

5. action 动作相关
同上
list info


分布式通讯
# 编辑配置文件
vim ~/.bashrc

# 在文件末尾添加（根据场景选择）
# 场景1：同一局域网
export ROS_DOMAIN_ID=10

# 场景2：跨子网（替换为实际服务器IP）
组1：设备 1号（192.198.2.10）与设备 3号（192.168.1.21）通信
# 设备3号终端：启动发现服务器（默认端口42555）
ros2 run rmw_fastrtps_cpp discovery_server
选择一台设备作为设备3 发现服务器
# export ROS_DOMAIN_ID=10
# export ROS_DISCOVERY_SERVER=192.168.1.21:42555

# 生效配置
source ~/.bashrc


测试方案：
传输图像 img 640*640*3 对比 C++ 与 python 的速度 
以发送间隔 20ms 为标准

测试效果如下：前处理统一缩放至640*640*3

cpp 
发送间隔 20ms 

未做任何后续处理，例如显示图像
发送帧数 0 - 0 接收帧数


添加绘制圆和显示图像处理
发送帧数 0 - 0 接收帧数


python
发送间隔 20ms 

未做任何后续处理，例如显示图像
发送帧数 0 - 0 接收帧数

添加绘制圆和显示图像处理
发送帧数 0 - 0 接收帧数

结论：在通讯传输上，两者速度无明显差别，当添加后续任意处理后，C++效率明显比python快非常多。
c++     0 fps
python  0 fps

